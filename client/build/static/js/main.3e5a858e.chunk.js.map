{"version":3,"sources":["logo.svg","components/TreeNode.js","components/Quotes.js","App.js","reportWebVitals.js","index.js"],"names":["TreeNode","post","id","child","rerender","event","a","preventDefault","console","log","target","postname","value","defaultValue","axios","response","status","data","window","alert","style","fontSize","margin","onSubmit","type","name","map","treenode","Object","keys","length","Math","random","renderChild","Quotes","useState","key","author","state","setState","getQuote","reqstype","url","xhttp","XMLHttpRequest","onload","jsonout","JSON","parse","responseText","content","_id","open","send","useEffect","setInterval","bind","TIME_IN_SECONDS","App","chat","setData","className","onLoad","src","logo","alt","href","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAAe,MAA0B,iC,gCC8C1BA,EA3CE,SAAXA,EAAY,GAA+B,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAAY,4CAO5C,WAA+BC,GAA/B,eAAAC,EAAA,6DACID,EAAME,iBACNC,QAAQC,IAAIJ,EAAMK,OAAOC,SAASC,MAAMP,EAAMK,OAAOR,GAAGW,cAF5D,kBAK+BC,IAAMb,KAAK,yBAAyB,CAC3DU,SAAU,CAACN,EAAMK,OAAOC,SAASC,MAAM,IACvCV,GAAIG,EAAMK,OAAOR,GAAGW,eAP5B,OAU+B,OALjBE,EALd,QAUoBC,QAGRZ,EAASW,EAASE,MAb9B,gDAiBQC,OAAOC,MAAM,wEAjBrB,0DAP4C,sBA4B5C,OACI,gCACI,mBAAGC,MAAO,CAAEC,SAAS,GAAGC,OAAO,GAA/B,SAAqCrB,IACrC,uBAAMsB,SA/B8B,4CA+BpC,UACI,uBAAOC,KAAK,OAAOC,KAAK,aACxB,uBAAOD,KAAK,SAASX,aAAcX,EAAIuB,KAAK,OAC5C,uBAAOD,KAAK,cAEhB,6BACKrB,EAAMuB,KAAI,SAACC,GAAD,OAnCvB,SAAqBA,GACjB,GAAkC,IAA/BC,OAAOC,KAAKF,GAAUG,OACrB,OAAQ,6BAA2B,cAAC9B,EAAD,CAAUI,SAAUA,EAAWH,KAAM0B,EAAS1B,KAAMC,GAAIyB,EAASzB,GAAIC,MAAOwB,EAASxB,OAAY,GAAG4B,KAAKC,WAA3H,GAAGD,KAAKC,UAiCEC,CAAYN,YCMpCO,MA3Cf,WAEI,MAA0BC,mBAAS,CAC/BlC,KAAK,0FACLmC,IAAI,EACJC,OAAO,WAHX,mBAAOC,EAAP,KAAcC,EAAd,KAWA,SAASC,EAASC,EAASC,GACvB,IAAMC,EAAQ,IAAIC,eAClBD,EAAME,OAAN,sBAAe,4BAAAvC,EAAA,sDAETwC,EAAUC,KAAKC,MAAML,EAAMM,cAG/BV,EAAS,CACPtC,KAAK6C,EAAQI,QACbb,OAAOS,EAAQT,OACfD,IAAIU,EAAQK,MARD,2CAYfR,EAAMS,KAAKX,EAASC,GAAI,GACxBC,EAAMU,OAGV,OAvBAC,qBAAU,WAENC,YAAYf,EAASgB,KAAK,KAAK,MAAM,kCAAkCC,OACzE,IAqBE,gCACI,8BACI,6BAAI,4BAAInB,EAAMrC,WAElB,8BACI,6BAAKqC,EAAMD,eCYZqB,MA9Cf,WAEE,IAAIC,EAAO,CAAE,KAAQ,yBAA0B,GAAM,IAAK,MAAS,CAAE,CAAE,KAAQ,WAAY,GAAM,oBAAqB,MAAS,CAAE,GAAI,KAAQ,CAAE,KAAQ,SAAU,GAAM,qBAAsB,MAAS,CAAE,GAAI,OAC5M,EAAwBxB,mBAAS,CAC/BjC,GAAGyD,EAAKzD,GACRD,KAAK0D,EAAK1D,KACVE,MAAMwD,EAAKxD,MACXiC,IAAI,GAAGL,KAAKC,WAJd,mBAAOf,EAAP,KAAa2C,EAAb,KA4BA,OACE,sBAAKC,UAAU,MAAMC,OAtBvB,SAAkBrB,EAASC,GACzB,IAAMC,EAAQ,IAAIC,eAClBD,EAAME,OAAN,sBAAe,4BAAAvC,EAAA,sDAETwC,EAAUC,KAAKC,MAAML,EAAMM,cAG/BW,EAAQ,CACN3D,KAAK6C,EAAQ7C,KACbC,GAAG4C,EAAQ5C,GACXC,MAAM2C,EAAQ3C,MACdiC,IAAI,GAAGL,KAAKC,WATD,2CAafW,EAAMS,KAAKX,EAASC,GAAI,GACxBC,EAAMU,QAMgCG,KAAK,KAAK,MAAM,0BAAtD,UACE,yBAAQK,UAAU,aAAlB,UACI,qBAAKE,IAAKC,EAAMH,UAAU,WAAWI,IAAI,SACzC,cAAC,EAAD,IACA,cAAC,EAAD,CAAUhE,KAAMgB,EAAKhB,KAAMC,GAAIe,EAAKf,GAA2BC,MAAOc,EAAKd,MAAOC,SAAUwD,GAA/C,GAAG7B,KAAKC,UACrD,mBAAGkC,KAAM,8BAA+B9C,MAAO,CAAC+C,MAAM,SAAtD,uBAEJ,iCACE,oEClCOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3e5a858e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst TreeNode = ({post, id, child, rerender})=>{\r\n\r\n    function renderChild(treenode){\r\n        if(Object.keys(treenode).length!==0)\r\n            return (<li key={10*Math.random()}><TreeNode rerender={rerender}  post={treenode.post} id={treenode.id} child={treenode.child} key={10*Math.random()}/></li>)\r\n    }\r\n\r\n    async function onSubmitHandler(event){\r\n        event.preventDefault()\r\n        console.log(event.target.postname.value,event.target.id.defaultValue)\r\n\r\n        try{\r\n            const response = await axios.post('http://localhost:5000/',{\r\n            postname: [event.target.postname.value,\"\"],\r\n            id: event.target.id.defaultValue\r\n            })\r\n        \r\n            if(response.status === 200){\r\n                // makeReqs(\"GET\",\"http://localhost:5000/\")\r\n                // console.log(response.data)\r\n                rerender(response.data)\r\n            }\r\n        }\r\n        catch(err){\r\n            window.alert(\"Cannot add new nodes, already filled. Add only two nodes per comment\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p style={{ fontSize:16,margin:0 }}>{post}</p>\r\n            <form onSubmit={onSubmitHandler}>\r\n                <input type='text' name='postname'/>\r\n                <input type=\"hidden\" defaultValue={id} name=\"id\" />\r\n                <input type=\"submit\" />\r\n            </form>\r\n            <ul>\r\n                {child.map((treenode)=>renderChild(treenode))}   \r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TreeNode","import React, { useEffect, useState } from \"react\";\r\n\r\n\r\nfunction Quotes(){\r\n    \r\n    const [state, setState] = useState({\r\n        post:\"Your work is to discover your work and then with all your heart to give yourself to it.\",\r\n        key:0,\r\n        author:\"Buddha\"\r\n    })\r\n    \r\n    useEffect(()=>{\r\n        const TIME_IN_SECONDS = 30\r\n        setInterval(getQuote.bind(null,\"GET\",\"https://api.quotable.io/random\"),TIME_IN_SECONDS*1000)\r\n    },[])\r\n\r\n    function getQuote(reqstype,url){\r\n        const xhttp = new XMLHttpRequest()\r\n        xhttp.onload = async() =>{\r\n    \r\n          let jsonout = JSON.parse(xhttp.responseText)\r\n        //   console.log(jsonout)\r\n    \r\n          setState({\r\n            post:jsonout.content,\r\n            author:jsonout.author,\r\n            key:jsonout._id\r\n          })\r\n        }\r\n        \r\n        xhttp.open(reqstype,url,true)\r\n        xhttp.send()\r\n      }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h4><i>{state.post}</i></h4>\r\n            </div>\r\n            <div>\r\n                <h6>{state.author}</h6>\r\n            </div>\r\n        </div>\r\n    )         \r\n}\r\n        \r\nexport default Quotes","import logo from './logo.svg';\nimport './App.css';\nimport TreeNode from './components/TreeNode'\nimport React, {useState} from 'react';\nimport Quotes from './components/Quotes';\n\nfunction App() {\n  \n  let chat = { \"post\": \"Server not connected !\", \"id\": 100, \"child\": [ { \"post\": \"aaaaaaaa\", \"id\": \"99.41315413709289\", \"child\": [ {}, {} ] }, { \"post\": \"ssssss\", \"id\": \"100.04884321567545\", \"child\": [ {}, {} ] } ] }\n  const [data, setData] = useState({\n    id:chat.id,\n    post:chat.post,\n    child:chat.child,\n    key:10*Math.random()\n  })\n\n  function makeReqs(reqstype,url){\n    const xhttp = new XMLHttpRequest()\n    xhttp.onload = async() =>{\n\n      let jsonout = JSON.parse(xhttp.responseText)\n      // console.log(jsonout)\n\n      setData({\n        post:jsonout.post,\n        id:jsonout.id,\n        child:jsonout.child,\n        key:10*Math.random()\n      })\n    }\n    \n    xhttp.open(reqstype,url,true)\n    xhttp.send()\n  }\n\n  // makeReqs(\"GET\",\"http://localhost:5000/\")\n\n  return (\n    <div className=\"App\" onLoad={makeReqs.bind(null,\"GET\",\"http://localhost:5000/\")}>\n      <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <Quotes />\n          <TreeNode post={data.post} id={data.id} key={10*Math.random()} child={data.child} rerender={setData}/>\n          <a href={'http://localhost:5000/debug'} style={{color:\"white\"}}>DEBUG?</a>\n      </header>\n      <footer>\n        <i>Quote update every 30 seconds</i>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}